#!/bin/sh
#
# Run a simple backup with encryption and a real sparse file.
#
TestName="sparse-encrypt-test"
JobName=Crypto
. scripts/functions

scripts/cleanup
scripts/copy-crypto-confs
echo "${cwd}/build" >${cwd}/tmp/file-list
cd ${cwd}/build/src/tools
./gigaslam
if [ $? != 0 ]; then
   echo "Execute of ${cwd}/build/src/tools/gigaslam failed."
   rm -f ${cwd}/build/src/tools/gigaslam.gif
   exit 1
fi
cd ${cwd}

change_jobname SparseTest $JobName
start_test

cat <<END_OF_DATA >${cwd}/tmp/bconcmds
@$out /dev/null
messages
@$out ${cwd}/tmp/log1.out
label storage=File volume=TestVolume001
setdebug level=10 fd
run job=$JobName yes
wait
messages
list volumes
@# 
@# now do a restore
@#
@$out ${cwd}/tmp/log2.out
@# setdebug level=0 fd
restore where=${cwd}/tmp/bacula-restores storage=File
5
mark *
done
yes
wait
messages
quit
END_OF_DATA

run_bacula
sleep 2
check_for_zombie_jobs storage=File 
stop_bacula

if [ ! -f ${cwd}/tmp/bacula-restores/${cwd}/build/src/tools/gigaslam.gif ]; then
   echo "============= file gigaslam.gif was not restored ======="
   size=0
else
   size=`du ${cwd}/tmp/bacula-restores/${cwd}/build/src/tools/gigaslam.gif | cut -f 1`
  if [ $size -gt 120 ]; then
      echo "========== restored sparse file: gigaslam.gif too big ========="
      echo "      size is ${size}K it should be 120K"
   fi                                                    
fi

check_two_logs
check_restore_diff
end_test
rm -f ${cwd}/build/src/tools/gigaslam.gif
rm -f ${cwd}/build/gigaslam.gif
