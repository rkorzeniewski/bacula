#!/bin/sh
#
# Run a simple backup of the Bacula build directory 
#  to two tapes where the maximum tape file size is set to 1M
#  Note, this test simulates the tape filling and writing to
#   the next tape. One minor wrinkle: we create the two tapes
#   in the Scratch pool, so they should be switched to the Default
#   Pool automatically.
# We set TestVolume001 to not in the changer, so the algorithm
#   should find TestVolume002 and use it rather than blocking.
#
#  Note we use the viritual disk autochanger
#
TestName="scratch-pool-test"
JobName=scratch-pool
. scripts/functions

if test x${AUTOCHANGER} = x/dev/null ; then
   echo "two-volume-test skipped. No autochanger."
   exit
fi
cwd=`pwd`
scripts/cleanup
scripts/copy-2disk-confs
scripts/prepare-disk-changer
 
echo "${cwd}/build" >${cwd}/tmp/file-list

outf="${cwd}/tmp/sed_tmp"
echo "s%# Maximum File Size%  Maximum File Size%g" >${outf}
cp ${cwd}/bin/bacula-sd.conf ${cwd}/tmp/1
sed -f ${outf} ${cwd}/tmp/1 >${cwd}/bin/bacula-sd.conf

change_jobname NightlySave $JobName
start_test

# Write out bconsole commands
cat <<END_OF_DATA >${cwd}/tmp/bconcmds
@$out /dev/null
messages
@$out ${cwd}/tmp/log1.out
label storage=tape volume=TestVolume001 slot=1 pool=Scratch drive=0
label storage=tape volume=TestVolume002 slot=2 pool=Scratch drive=0
update Volume=TestVolume001 MaxVolBytes=2000000 pool=Scratch drive=0
update Volume=TestVolume001 inchanger=no pool=Scratch drive=0
@#setdebug level=200 storage=tape
llist volume=TestVolume001
llist volume=TestVolume002
run job=$JobName yes
wait
messages
list volumes
llist volume=TestVolume001
@# 
@# now do a restore
@#
@$out ${cwd}/tmp/log2.out
restore where=${cwd}/tmp/bacula-restores select all storage=tape done
yes
wait
messages
quit
END_OF_DATA

run_bacula
check_for_zombie_jobs storage=tape
stop_bacula

check_two_logs
check_restore_diff
end_test
