#!/bin/sh
#
# Run a simple backup of the Bacula build directory then migrate it
#   to another device.
#
# This script uses the virtual disk autochanger
#
TestName="migration-time-test"
JobName=MigrationJobSave
. scripts/functions


scripts/cleanup
scripts/copy-migration-confs
scripts/prepare-disk-changer
echo "${cwd}/build" >${cwd}/tmp/file-list

change_jobname NightlySave $JobName
start_test

#
# Note, we first backup into Pool Default, 
#          then Migrate into Pool Full. 
#              Pool Default uses Storage=File
#              Pool Full    uses Storage=DiskChanger

# Write out bconsole commands
cat <<END_OF_DATA >${cwd}/tmp/bconcmds
@output /dev/null
messages
@$out ${cwd}/tmp/log1.out
label storage=File volume=FileVolume001 Pool=Default
label storage=File volume=FileVolume002 Pool=Special
label storage=DiskChanger volume=ChangerVolume001 slot=1 Pool=Full drive=0
label storage=DiskChanger volume=ChangerVolume002 slot=2 Pool=Full drive=0
list volumes
@# run three jobs
run job=$JobName pool=Special level=Full yes
run job=$JobName level=Full yes
run job=$JobName level=Full yes
wait
update volume=FileVolume001 VolStatus=Used
update volume=FileVolume002 VolStatus=Used
@sleep 3
llist jobid=2,3
list jobs
list volumes
@#setdebug level=20 dir
@# should migrate only jobid=2 and 3
run job=migrate-time yes
wait
messages
wait
list jobs
list volumes
@# 
@# now do a restore
@#
@$out ${cwd}/tmp/log2.out
restore where=${cwd}/tmp/bacula-restores select storage=DiskChanger
unmark *
mark *
done
yes
wait
messages
quit
END_OF_DATA

run_bacula
check_for_zombie_jobs storage=File
stop_bacula

for i in 1 2 3; do
    get_mig_info $i ${cwd}/tmp/log1.out

    if [ "$i" -eq 1 -a -n "$RET" ]; then
        bstat=2
        print_debug "The first job should not have been copied"

    elif [ "$i" -ne 1 -a -z "$RET" ]; then
        bstat=2
        print_debug "Other job should have been copied"
    fi
done

check_two_logs
check_restore_diff
end_test
